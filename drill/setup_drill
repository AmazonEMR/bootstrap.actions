#!/usr/bin/ruby
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'json'
require 'emr/common'

def run(cmd)
    if ! system(cmd) then
      raise "Command failed: #{cmd}"
    end
end

def sudo(cmd)
   run("sudo #{cmd}")
end

job_flow = Emr::JsonInfoFile.new('job-flow')
instance_info = Emr::JsonInfoFile.new('instance')
is_master = instance_info['isMaster'].to_s == 'true'
zookeeper = job_flow['masterPrivateDnsName']

if is_master
   sudo "apt-get -y install rubygems zookeeper expect"
end

require 'rubygems'

sudo "curl -L --silent --show-error --fail --connect-timeout 60 --max-time 720 --retry 5 -O http://people.apache.org/~jacques/apache-drill-1.0.0-m1.rc3/apache-drill-1.0.0-m1-binary-release.tar.gz && tar xzf apache-drill-1.0.0-m1-binary-release.tar.gz && mv -f apache-drill-1.0.0-m1 /home/hadoop/.versions/ && chown -R hadoop.hadoop /home/hadoop/.versions/apache-drill-1.0.0-m1 && ln -sf /home/hadoop/.versions/apache-drill-1.0.0-m1 /home/hadoop/drill"

File.open('/tmp/drill-override.conf', 'w') do |f|
  f.write(<<EOF
drill.exec: {
  cluster-id: "EMR-Drill"
  rpc: {
        user.port : 31010,
        bit.port : 32011
  },
  operator: {
    packages += "org.apache.drill.exec.physical.config"
  },
  optimizer: {
    implementation: "org.apache.drill.exec.opt.IdentityOptimizer"
  },
  storage: {
        packages += "org.apache.drill.exec.store"
  }
  metrics : {
        context: "drillbit"
  },
  zk: {
        connect: "#{zookeeper}",
        root: "/drill",
        refresh: 500,
        timeout: 5000,
        retry: {
          count: 7200,
          delay: 500
        }
  }

  network: {
    start: 35000
  }
}

EOF
)
end

sudo "mv /tmp/drill-override.conf /home/hadoop/drill/conf/drill-override.conf"
sudo "mkdir -p /mnt/var/run/drill && mkdir -p /mnt/var/log/drill && chown -R hadoop.hadoop /mnt/var/log/drill"

File.open('/tmp/run_drill', 'w') do |f|
  f.write(<<EOF
export DRILL_LOG_DIR=/mnt/var/log/drill
export DRILL_MAX_DIRECT_MEMORY=4096M
/home/hadoop/drill/bin/drillbit.sh start
EOF
)
end

sudo "mv /tmp/run_drill /mnt/var/run/drill/run_drill"

File.open('/tmp/drill.conf', 'w') do |f|
          f.write(<<EOF
[

{ "name": "run-zookeeper",
  "type": "file",
  "file": "/mnt/var/run/drill/run-zookeeper",
  "pattern": "1"
},

{ "name": "run-drill",
  "type": "file",
  "file": "/mnt/var/run/drill/run-drill",
  "pattern": "1"
},

{
  "name": "drill-bit",
  "type": "process",
  "start": "/etc/init.d/drillbit start",
  "stop": "/etc/init.d/drillbit stop",
  "pid-file": "/mnt/var/run/drill/drill_bit.pid",
  "pattern": "DrillBit",
  "depends": ["run-drill", "zookeeper"]
},

{
  "name": "zookeeper",
  "type": "process",
  "start": "/etc/init.d/zookeeper start",
  "stop": "/etc/init.d/zookeeper stop",
  "pid-file": "/mnt/var/run/drill/drill-hadoop-zookeeper.pid",
  "pattern": "org.apache.zookeeper.server.quorum.QuorumPeerMain",
  "depends": ["run-zookeeper"]
}

]
EOF
)
end
sudo "mv /tmp/drill.conf /etc/service-nanny/drill.conf"
sudo "/etc/init.d/service-nanny reload"
